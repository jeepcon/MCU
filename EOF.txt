######################################################
#       Connect Top app buttons to action definitions    #
######################################################
        self.emLights_btn.clicked.connect(self.emLights_btn_def)
        self.nav_btn.clicked.connect(self.vicControl_btn_def)
        self.backupCam_btn.clicked.connect(self.backupCam_btn_def)
        self.phone_btn.clicked.connect(self.phone_btn_def)
        self.media_btn.clicked.connect(self.media_btn_def)
        self.vicControl_btn.clicked.connect(self.nav_btn_def)

#############################################################
#	Connect the Buttons to action definitions      #
#############################################################
        self.emLightMaster_btn.clicked.connect(self.emLightMaster)
        self.frontLightFlasher_btn.clicked.connect(self.frontLightFlasher)
        self.backLightFlasher_btn.clicked.connect(self.backLightFlasher)
        self.bodyLightFlasher_btn.clicked.connect(self.bodyLightFlasher)
        self.headLightFlasher_btn.clicked.connect(self.headLightFlasher)
        self.hazardFlasher_btn.clicked.connect(self.hazardFlasher)
        self.OBA_btn.clicked.connect(self.OBA)
        self.Washer_btn.pressed.connect(self.WasherPressed)
        self.Washer_btn.released.connect(self.WasherReleased)
        self.WinchIn_btn.pressed.connect(self.WinchInPressed)
        self.WinchIn_btn.released.connect(self.WinchInReleased)
        self.WinchOut_btn.pressed.connect(self.WinchOutPressed)
        self.WinchOut_btn.released.connect(self.WinchOutReleased)
        self.wiper_slider.valueChanged.connect(self.wiper)
        self.headLight_slider.valueChanged.connect(self.headLight)
        self.siren_slider.valueChanged.connect(self.siren)
        self.horn_btn.pressed.connect(self.hornPressed)
        self.horn_btn.released.connect(self.hornReleased)
        # self.garageDoor_btn.pressed.connect(self.garageDoorPressed)
        # self.garageDoor_btn.released.connect(self.garageDoorReleased)
        # self.starterMotor_btn.pressed.connect(self.starterMotorPressed)
        # self.starterMotor_btn.released.connect(self.starterMotorReleased)
        # self.floodRight_btn.clicked.connect(self.floodRight)
        # self.floodLeft_btn.clicked.connect(self.floodLeft)
        # self.cbRadio_btn.clicked.connect(self.cbRadio)
        # self.vhfRadio_btn.clicked.connect(self.vhfRadio)
        # self.intercomSystem_btn.clicked.connect(self.intercomSystem)
        # self.fuelPump_btn.clicked.connect(self.fuelPump)
        # self.backupLights_btn.clicked.connect(self.backupLights)

##########################################
#       App button action definitions    #
##########################################
    def emLights_btn_def(self):
        self.zmainStack.setCurrentIndex(0)
    def nav_btn_def(self):
        self.zmainStack.setCurrentIndex(1)
    def backupCam_btn_def(self):
        self.zmainStack.setCurrentIndex(2)
    def phone_btn_def(self):
        self.zmainStack.setCurrentIndex(3)
    def media_btn_def(self):
        self.zmainStack.setCurrentIndex(4)
    def vicControl_btn_def(self):
        self.zmainStack.setCurrentIndex(5)

##################################################
#       Common Button action definitions         #
##################################################

    def emLightMaster(self):
        if self.emLightMaster_btn.isChecked():
            self.frontLightFlasher_btn.setChecked(True)
            self.backLightFlasher_btn.setChecked(True)
            self.bodyLightFlasher_btn.setChecked(True)
            self.headLightFlasher_btn.setChecked(True)
            self.hazardFlasher_btn.setChecked(True)
            arduinoRBC.write(str.encode('FrontEMLightsON'))
            arduinoRBC.write(str.encode('BodyEMLightsON'))
            arduinoRBC.write(str.encode('BackEMLightsON'))
        else:
            self.frontLightFlasher_btn.setChecked(False)
            self.backLightFlasher_btn.setChecked(False)
            self.bodyLightFlasher_btn.setChecked(False)
            self.headLightFlasher_btn.setChecked(False)
            self.hazardFlasher_btn.setChecked(False)
            arduinoRBC.write(str.encode('FrontEMLightsOFF'))
            arduinoRBC.write(str.encode('BodyEMLightsON'))
            arduinoRBC.write(str.encode('BackEMLightsON'))
            
    def headLight(self, value):
        if value == 1:
            arduinoRBC.write(str.encode('RunningLightsON'))
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Parking.png);}")

        elif value == 2:
            arduinoRBC.write(str.encode('HeadLightLOW'))
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/On.png);}")

        elif value == 3:
            arduinoRBC.write(str.encode('HeadLightHIGH'))
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/High.png);}")

        elif value == 4:
            print ("HeadLights AUTO")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Auto.png);}")

        else:
            arduinoRBC.write(str.encode('RunningLightsOFF'))
            arduinoRBC.write(str.encode('HeadLightOFF'))
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Off.png);}")

    def hazardFlasher(self):
        if self.hazardFlasher_btn.isChecked():
            arduinoRBC.write(str.encode('LeftTurnON'))
            arduinoRBC.write(str.encode('RightTurnON'))
        else:
            arduinoRBC.write(str.encode('LeftTurnOFF'))
            arduinoRBC.write(str.encode('RightTurnOFF'))
            
##################################################################
#       Front Body Controller Button actions definitions         #
##################################################################

    def frontLightFlasher(self):
        if self.frontLightFlasher_btn.isChecked():
            arduinoRBC.write(str.encode('FrontEMLightsON'))
        else:
            arduinoRBC.write(str.encode('FrontEMLightsOFF'))

    def headLightFlasher(self):
        if self.headLightFlasher_btn.isChecked():
            print ("headLightFlasher ON")
        else:
            print ("headLightFlasher OFF")

    def OBA(self):
        if self.OBA_btn.isChecked():
            arduinoRBC.write(str.encode('OBAON'))
        else:
            arduinoRBC.write(str.encode('OBAOFF'))

    def garageDoorPressed(self):
        arduinoRBC.write(str.encode('GarageDoorON'))
        # self.garageDoor_btn.setChecked(True)
    
    def garageDoorReleased(self):
        arduinoRBC.write(str.encode('GarageDoorOFF'))
        # self.garageDoor_btn.setChecked(False)
        
    def starterMotorPressed(self):
        arduinoRBC.write(str.encode('StarterON'))
        # self.starterMotor_btn.setChecked(True)

    def starterMotorReleased(self):
        arduinoRBC.write(str.encode('StarterOFF'))
        # self.starterMotor_btn.setChecked(False)
        
    def WasherPressed(self):
        arduinoRBC.write(str.encode('WasherON'))
        self.Washer_btn.setChecked(True)

    def WasherReleased(self):
        arduinoRBC.write(str.encode('WasherOFF'))
        self.Washer_btn.setChecked(False)

    def WinchInPressed(self):
        print ("Winch In - Started")
        self.WinchIn_btn.setChecked(True)

    def WinchInReleased(self):
        print ("Winch In - Stopped")
        self.WinchIn_btn.setChecked(False)

    def WinchOutPressed(self):
        print ("Winch Out - Started")
        self.WinchOut_btn.setChecked(True)

    def WinchOutReleased(self):
        print ("Winch Out - Stopped")
        self.WinchOut_btn.setChecked(False)
            
#################################################################
#        Mid Body Controller Button actions definitions         #
#################################################################

    def bodyLightFlasher(self):
        if self.bodyLightFlasher_btn.isChecked():
            arduinoRBC.write(str.encode('BodyEMLightsON'))
        else:
            arduinoRBC.write(str.encode('BodyEMLightsOFF'))

    def floodRight(self):
        # if self.floodRight_btn.isChecked():
        #     arduinoRBC.write(str.encode('FloodRightON'))
        # else:
        #     arduinoRBC.write(str.encode('FloodRightOFF'))

    def floodLeft(self):
        # if self.floodLeft_btn.isChecked():
        #     arduinoRBC.write(str.encode('FloodLeftON'))
        # else:
        #     arduinoRBC.write(str.encode('FloodLeftOFF'))

    def siren(self, value):
        if value == 1:
            arduinoRBC.write(str.encode('SirenWailON'))
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Wail.png);}")

        elif value == 2:
            arduinoRBC.write(str.encode('SirenYelpON'))
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Warble.png);}")

        elif value == 3:
            arduinoRBC.write(str.encode('SirenPhaserON'))
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Whoop.png);}")

        else:
            arduinoRBC.write(str.encode('SirenOFF'))
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Off.png);}")

    def hornPressed(self):
            arduinoRBC.write(str.encode('HornON'))
            self.horn_btn.setChecked(True)

    def hornReleased(self):
            arduinoRBC.write(str.encode('HornOFF'))
            self.horn_btn.setChecked(False)

    def wiper(self, value):
        if value == 1:
            arduinoRBC.write(str.encode('WiperLowON'))
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/Low.png);}")

        elif value == 2:
            arduinoRBC.write(str.encode('WiperHighON'))
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/High.png);}")

        else:
            arduinoRBC.write(str.encode('WiperOFF'))
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/Off.png);}")

    def cbRadio(self):
        # if self.cbRadio_btn.isChecked():
        #     arduinoRBC.write(str.encode('CBRadioON'))
        # else:
        #     arduinoRBC.write(str.encode('CBRadioOFF'))
        
    def vhfRadio(self):
        # if self.vhfRadio_btn.isChecked():
        #     arduinoRBC.write(str.encode('VHFRadioON'))
        # else:
        #     arduinoRBC.write(str.encode('VHFRadioOFF'))
        
    def intercomSystem(self):
        # if self.intercomSystem_btn.isChecked():
        #     arduinoRBC.write(str.encode('IntercomON'))
        # else:
        #     arduinoRBC.write(str.encode('IntercomOFF'))
        
##################################################################
#        Rear Body Controller Button actions definitions         #
##################################################################

    def backLightFlasher(self):
        if self.backLightFlasher_btn.isChecked():
            arduinoRBC.write(str.encode('BackEMLightsON'))
        else:
            arduinoRBC.write(str.encode('BackEMLightsON'))

    def fuelPump(self):
        # if self.fuelPump_btn.isChecked():
        #     arduinoRBC.write(str.encode('FuelPumpON'))
        # else:
        #     arduinoRBC.write(str.encode('FuelPumpOFF'))
        
    def backupLights(self):
        # if self.backupLights_btn.isChecked():
        #     arduinoRBC.write(str.encode('BackupLightsON'))
        # else:
        #     arduinoRBC.write(str.encode('BackupLightsOFF'))    
    

##################

def main():
   app = QtWidgets.QApplication(sys.argv)
   ex = Ui_MainWindow()
   ex.setWindowFlags(QtCore.Qt.FramelessWindowHint)
   ex.showMaximized()
   sys.exit(app.exec_())

if __name__ == '__main__':
   main()
