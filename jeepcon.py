#!/usr/local/bin/python3

import os
import sys
import images_rc
import time
import worker
import settings
import serial

arduino = serial.Serial('/dev/tty.usbmodem1421', 115200)

from PyQt5.QtCore import QThread
os.putenv('SDL_VIDEODRIVER', 'fbcon')
from PyQt5 import QtWidgets, QtCore, QtGui

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.obj = worker.Workers()
        self.thread = QThread()
        self.obj.moveToThread(self.thread)
        self.obj.finished.connect(self.thread.quit)
        self.thread.started.connect(self.obj.WigWag)
        self.thread.setTerminationEnabled(True)

        QtWidgets.QMainWindow.__init__(self)
        self.setupUi(self)



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 1280)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        MainWindow.setPalette(palette)
        MainWindow.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet("QToolButton { background-color: black; border: none; color: white}\n"
"")
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.topInfoBar_frame = QtWidgets.QFrame(self.centralWidget)
        self.topInfoBar_frame.setGeometry(QtCore.QRect(0, 0, 800, 61))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.topInfoBar_frame.setPalette(palette)
        self.topInfoBar_frame.setAutoFillBackground(True)
        self.topInfoBar_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.topInfoBar_frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.topInfoBar_frame.setObjectName("topInfoBar_frame")
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.topInfoBar_frame)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(-1, -1, 801, 62))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.homelink_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_5)
        self.homelink_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.homelink_btn.setAutoFillBackground(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/homelink_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.homelink_btn.setIcon(icon)
        self.homelink_btn.setIconSize(QtCore.QSize(30, 30))
        self.homelink_btn.setObjectName("homelink_btn")
        self.horizontalLayout.addWidget(self.homelink_btn)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.access_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_5)
        self.access_btn.setMaximumSize(QtCore.QSize(50, 50))
        self.access_btn.setAutoFillBackground(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/teslaLogo_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.access_btn.setIcon(icon1)
        self.access_btn.setIconSize(QtCore.QSize(40, 40))
        self.access_btn.setObjectName("access_btn")
        self.horizontalLayout.addWidget(self.access_btn)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.RightSideBar_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_5)
        self.RightSideBar_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.RightSideBar_btn.setAutoFillBackground(False)
        self.RightSideBar_btn.setIconSize(QtCore.QSize(30, 30))
        self.RightSideBar_btn.setObjectName("RightSideBar_btn")
        self.horizontalLayout.addWidget(self.RightSideBar_btn)
        self.app_frame = QtWidgets.QFrame(self.centralWidget)
        self.app_frame.setGeometry(QtCore.QRect(0, 60, 800, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.app_frame.setPalette(palette)
        self.app_frame.setAutoFillBackground(True)
        self.app_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.app_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.app_frame.setObjectName("app_frame")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.app_frame)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(-1, 0, 801, 112))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.appframe_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.appframe_layout.setContentsMargins(11, 11, 11, 11)
        self.appframe_layout.setSpacing(6)
        self.appframe_layout.setObjectName("appframe_layout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem2)
        self.emLights_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.emLights_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.emLights_btn.setAutoFillBackground(False)
        self.emLights_btn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/emLight_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.emLights_btn.setIcon(icon2)
        self.emLights_btn.setIconSize(QtCore.QSize(90, 90))
        self.emLights_btn.setObjectName("emLights_btn")
        self.appframe_layout.addWidget(self.emLights_btn)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem3)
        self.nav_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.nav_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.nav_btn.setAutoFillBackground(False)
        self.nav_btn.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/nav_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.nav_btn.setIcon(icon3)
        self.nav_btn.setIconSize(QtCore.QSize(90, 90))
        self.nav_btn.setObjectName("nav_btn")
        self.appframe_layout.addWidget(self.nav_btn)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem4)
        self.backupCam_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.backupCam_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.backupCam_btn.setAutoFillBackground(False)
        self.backupCam_btn.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/backupCam_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.backupCam_btn.setIcon(icon4)
        self.backupCam_btn.setIconSize(QtCore.QSize(90, 90))
        self.backupCam_btn.setObjectName("backupCam_btn")
        self.appframe_layout.addWidget(self.backupCam_btn)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem5)
        self.phone_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.phone_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.phone_btn.setAutoFillBackground(False)
        self.phone_btn.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/phone_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.phone_btn.setIcon(icon5)
        self.phone_btn.setIconSize(QtCore.QSize(90, 90))
        self.phone_btn.setObjectName("phone_btn")
        self.appframe_layout.addWidget(self.phone_btn)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem6)
        self.media_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        self.media_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.media_btn.setAutoFillBackground(False)
        self.media_btn.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/music_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.media_btn.setIcon(icon6)
        self.media_btn.setIconSize(QtCore.QSize(90, 90))
        self.media_btn.setObjectName("media_btn")
        self.appframe_layout.addWidget(self.media_btn)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.appframe_layout.addItem(spacerItem7)
        self.zmainStack = QtWidgets.QStackedWidget(self.centralWidget)
        self.zmainStack.setGeometry(QtCore.QRect(0, 180, 801, 951))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.zmainStack.setPalette(palette)
        self.zmainStack.setAutoFillBackground(True)
        self.zmainStack.setObjectName("zmainStack")
        self.WarnSys_page = QtWidgets.QWidget()
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WarnSys_page.setPalette(palette)
        self.WarnSys_page.setObjectName("WarnSys_page")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.WarnSys_page)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(0, 20, 801, 202))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.gridLayout = QtWidgets.QGridLayout(self.horizontalLayoutWidget_2)
        self.gridLayout.setContentsMargins(11, 11, 11, 11)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.WigWag_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WigWag_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WigWag_Label.setFont(font)
        self.WigWag_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.WigWag_Label.setObjectName("WigWag_Label")
        self.gridLayout.addWidget(self.WigWag_Label, 2, 5, 1, 1)
        self.Back_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Back_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Back_Label.setFont(font)
        self.Back_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Back_Label.setObjectName("Back_Label")
        self.gridLayout.addWidget(self.Back_Label, 2, 1, 1, 1)
        self.headLightFlasher_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.headLightFlasher_btn.sizePolicy().hasHeightForWidth())
        self.headLightFlasher_btn.setSizePolicy(sizePolicy)
        self.headLightFlasher_btn.setMinimumSize(QtCore.QSize(125, 60))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/images/buttons/OFF.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/images/buttons/ON.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.headLightFlasher_btn.setIcon(icon7)
        self.headLightFlasher_btn.setIconSize(QtCore.QSize(125, 60))
        self.headLightFlasher_btn.setCheckable(True)
        self.headLightFlasher_btn.setObjectName("headLightFlasher_btn")
        self.gridLayout.addWidget(self.headLightFlasher_btn, 3, 5, 1, 1)
        self.hazardFlasher_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.hazardFlasher_btn.sizePolicy().hasHeightForWidth())
        self.hazardFlasher_btn.setSizePolicy(sizePolicy)
        self.hazardFlasher_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.hazardFlasher_btn.setIcon(icon7)
        self.hazardFlasher_btn.setIconSize(QtCore.QSize(125, 60))
        self.hazardFlasher_btn.setCheckable(True)
        self.hazardFlasher_btn.setObjectName("hazardFlasher_btn")
        self.gridLayout.addWidget(self.hazardFlasher_btn, 1, 5, 1, 1)
        self.bodyLightFlasher_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bodyLightFlasher_btn.sizePolicy().hasHeightForWidth())
        self.bodyLightFlasher_btn.setSizePolicy(sizePolicy)
        self.bodyLightFlasher_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.bodyLightFlasher_btn.setIcon(icon7)
        self.bodyLightFlasher_btn.setIconSize(QtCore.QSize(125, 60))
        self.bodyLightFlasher_btn.setCheckable(True)
        self.bodyLightFlasher_btn.setObjectName("bodyLightFlasher_btn")
        self.gridLayout.addWidget(self.bodyLightFlasher_btn, 3, 2, 1, 1)
        self.Body_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Body_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Body_Label.setFont(font)
        self.Body_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Body_Label.setObjectName("Body_Label")
        self.gridLayout.addWidget(self.Body_Label, 2, 2, 1, 1)
        self.backLightFlasher_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.backLightFlasher_btn.sizePolicy().hasHeightForWidth())
        self.backLightFlasher_btn.setSizePolicy(sizePolicy)
        self.backLightFlasher_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.backLightFlasher_btn.setIcon(icon7)
        self.backLightFlasher_btn.setIconSize(QtCore.QSize(125, 60))
        self.backLightFlasher_btn.setCheckable(True)
        self.backLightFlasher_btn.setObjectName("backLightFlasher_btn")
        self.gridLayout.addWidget(self.backLightFlasher_btn, 3, 1, 1, 1)
        self.Master_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Master_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Master_Label.setFont(font)
        self.Master_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Master_Label.setObjectName("Master_Label")
        self.gridLayout.addWidget(self.Master_Label, 0, 1, 1, 1)
        self.Front_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Front_label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Front_label.setFont(font)
        self.Front_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Front_label.setObjectName("Front_label")
        self.gridLayout.addWidget(self.Front_label, 0, 2, 1, 1)
        self.emLightMaster_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.emLightMaster_btn.sizePolicy().hasHeightForWidth())
        self.emLightMaster_btn.setSizePolicy(sizePolicy)
        self.emLightMaster_btn.setMinimumSize(QtCore.QSize(125, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.emLightMaster_btn.setPalette(palette)
        self.emLightMaster_btn.setIcon(icon7)
        self.emLightMaster_btn.setIconSize(QtCore.QSize(125, 60))
        self.emLightMaster_btn.setCheckable(True)
        self.emLightMaster_btn.setObjectName("emLightMaster_btn")
        self.gridLayout.addWidget(self.emLightMaster_btn, 1, 1, 1, 1)
        self.frontLightFlasher_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frontLightFlasher_btn.sizePolicy().hasHeightForWidth())
        self.frontLightFlasher_btn.setSizePolicy(sizePolicy)
        self.frontLightFlasher_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.frontLightFlasher_btn.setIcon(icon7)
        self.frontLightFlasher_btn.setIconSize(QtCore.QSize(125, 60))
        self.frontLightFlasher_btn.setCheckable(True)
        self.frontLightFlasher_btn.setObjectName("frontLightFlasher_btn")
        self.gridLayout.addWidget(self.frontLightFlasher_btn, 1, 2, 1, 1)
        self.Hazard_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Hazard_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Hazard_Label.setFont(font)
        self.Hazard_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Hazard_Label.setObjectName("Hazard_Label")
        self.gridLayout.addWidget(self.Hazard_Label, 0, 5, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem8, 0, 0, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem9, 0, 6, 1, 1)
        self.siren_slider = QtWidgets.QSlider(self.WarnSys_page)
        self.siren_slider.setGeometry(QtCore.QRect(70, 430, 500, 93))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.siren_slider.sizePolicy().hasHeightForWidth())
        self.siren_slider.setSizePolicy(sizePolicy)
        self.siren_slider.setBaseSize(QtCore.QSize(621, 93))
        self.siren_slider.setStyleSheet("QSlider::groove:horizontal {\n"
"    height: 60px;\n"
"    image: url(:/images/slider/SirenSlider_BG.png);\n"
"}\n"
"QSlider::handle:horizontal {\n"
"    width: 125px;\n"
"    image: url(:/images/slider/Off.png);\n"
"}")
        self.siren_slider.setMaximum(3)
        self.siren_slider.setPageStep(1)
        self.siren_slider.setOrientation(QtCore.Qt.Horizontal)
        self.siren_slider.setObjectName("siren_slider")
        self.horn_btn = QtWidgets.QToolButton(self.WarnSys_page)
        self.horn_btn.setGeometry(QtCore.QRect(590, 430, 128, 93))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horn_btn.sizePolicy().hasHeightForWidth())
        self.horn_btn.setSizePolicy(sizePolicy)
        self.horn_btn.setMinimumSize(QtCore.QSize(125, 60))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/images/buttons/AirHorn_Off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon8.addPixmap(QtGui.QPixmap(":/images/buttons/AirHorn_On.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.horn_btn.setIcon(icon8)
        self.horn_btn.setIconSize(QtCore.QSize(125, 60))
        self.horn_btn.setCheckable(True)
        self.horn_btn.setObjectName("horn_btn")
        self.WigWag_Label_2 = QtWidgets.QLabel(self.WarnSys_page)
        self.WigWag_Label_2.setGeometry(QtCore.QRect(240, 420, 152, 22))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WigWag_Label_2.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WigWag_Label_2.setFont(font)
        self.WigWag_Label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.WigWag_Label_2.setObjectName("WigWag_Label_2")
        self.zmainStack.addWidget(self.WarnSys_page)
        self.Nav_page = QtWidgets.QWidget()
        self.Nav_page.setObjectName("Nav_page")
        self.label_3 = QtWidgets.QLabel(self.Nav_page)
        self.label_3.setGeometry(QtCore.QRect(340, 120, 131, 16))
        self.label_3.setObjectName("label_3")
        self.zmainStack.addWidget(self.Nav_page)
        self.BackupCam_page = QtWidgets.QWidget()
        self.BackupCam_page.setObjectName("BackupCam_page")
        self.label_4 = QtWidgets.QLabel(self.BackupCam_page)
        self.label_4.setGeometry(QtCore.QRect(350, 140, 141, 16))
        self.label_4.setObjectName("label_4")
        self.zmainStack.addWidget(self.BackupCam_page)
        self.Phone_page = QtWidgets.QWidget()
        self.Phone_page.setObjectName("Phone_page")
        self.label = QtWidgets.QLabel(self.Phone_page)
        self.label.setGeometry(QtCore.QRect(270, 60, 141, 16))
        self.label.setObjectName("label")
        self.zmainStack.addWidget(self.Phone_page)
        self.Music_Page = QtWidgets.QWidget()
        self.Music_Page.setObjectName("Music_Page")
        self.label_2 = QtWidgets.QLabel(self.Music_Page)
        self.label_2.setGeometry(QtCore.QRect(220, 200, 141, 16))
        self.label_2.setObjectName("label_2")
        self.zmainStack.addWidget(self.Music_Page)
        self.VehCon_page = QtWidgets.QWidget()
        self.VehCon_page.setObjectName("VehCon_page")
        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(self.VehCon_page)
        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(0, 380, 801, 121))
        self.horizontalLayoutWidget_6.setObjectName("horizontalLayoutWidget_6")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.horizontalLayoutWidget_6)
        self.gridLayout_5.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_5.setSpacing(6)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setSpacing(6)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.WinchIn_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.WinchIn_btn.sizePolicy().hasHeightForWidth())
        self.WinchIn_btn.setSizePolicy(sizePolicy)
        self.WinchIn_btn.setMinimumSize(QtCore.QSize(125, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.WinchIn_btn.setPalette(palette)
        self.WinchIn_btn.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/images/buttons/OFF.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon9.addPixmap(QtGui.QPixmap(":/images/slider/On.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.WinchIn_btn.setIcon(icon9)
        self.WinchIn_btn.setIconSize(QtCore.QSize(125, 60))
        self.WinchIn_btn.setCheckable(True)
        self.WinchIn_btn.setObjectName("WinchIn_btn")
        self.gridLayout_6.addWidget(self.WinchIn_btn, 1, 1, 1, 1)
        self.SideLights_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SideLights_btn.sizePolicy().hasHeightForWidth())
        self.SideLights_btn.setSizePolicy(sizePolicy)
        self.SideLights_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.SideLights_btn.setText("")
        self.SideLights_btn.setIcon(icon9)
        self.SideLights_btn.setIconSize(QtCore.QSize(125, 60))
        self.SideLights_btn.setCheckable(True)
        self.SideLights_btn.setObjectName("SideLights_btn")
        self.gridLayout_6.addWidget(self.SideLights_btn, 1, 3, 1, 1)
        self.WinchOut_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.WinchOut_btn.sizePolicy().hasHeightForWidth())
        self.WinchOut_btn.setSizePolicy(sizePolicy)
        self.WinchOut_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.WinchOut_btn.setText("")
        self.WinchOut_btn.setIcon(icon9)
        self.WinchOut_btn.setIconSize(QtCore.QSize(125, 60))
        self.WinchOut_btn.setCheckable(True)
        self.WinchOut_btn.setObjectName("WinchOut_btn")
        self.gridLayout_6.addWidget(self.WinchOut_btn, 1, 2, 1, 1)
        self.OBA_btn = QtWidgets.QToolButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OBA_btn.sizePolicy().hasHeightForWidth())
        self.OBA_btn.setSizePolicy(sizePolicy)
        self.OBA_btn.setMinimumSize(QtCore.QSize(125, 60))
        self.OBA_btn.setText("")
        self.OBA_btn.setIcon(icon9)
        self.OBA_btn.setIconSize(QtCore.QSize(125, 60))
        self.OBA_btn.setCheckable(True)
        self.OBA_btn.setObjectName("OBA_btn")
        self.gridLayout_6.addWidget(self.OBA_btn, 1, 4, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_6.addItem(spacerItem10, 1, 0, 1, 1)
        self.WinchIn_label = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WinchIn_label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WinchIn_label.setFont(font)
        self.WinchIn_label.setAlignment(QtCore.Qt.AlignCenter)
        self.WinchIn_label.setObjectName("WinchIn_label")
        self.gridLayout_6.addWidget(self.WinchIn_label, 0, 1, 1, 1)
        self.WinchOut_lable = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WinchOut_lable.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WinchOut_lable.setFont(font)
        self.WinchOut_lable.setAlignment(QtCore.Qt.AlignCenter)
        self.WinchOut_lable.setObjectName("WinchOut_lable")
        self.gridLayout_6.addWidget(self.WinchOut_lable, 0, 2, 1, 1)
        self.OBA_Label = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.OBA_Label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.OBA_Label.setFont(font)
        self.OBA_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.OBA_Label.setObjectName("OBA_Label")
        self.gridLayout_6.addWidget(self.OBA_Label, 0, 4, 1, 1)
        self.SideLights_label = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.SideLights_label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.SideLights_label.setFont(font)
        self.SideLights_label.setAlignment(QtCore.Qt.AlignCenter)
        self.SideLights_label.setObjectName("SideLights_label")
        self.gridLayout_6.addWidget(self.SideLights_label, 0, 3, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_6.addItem(spacerItem11, 1, 5, 1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_6, 0, 0, 1, 1)
        self.headLight_slider = QtWidgets.QSlider(self.VehCon_page)
        self.headLight_slider.setGeometry(QtCore.QRect(80, 50, 625, 93))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.headLight_slider.sizePolicy().hasHeightForWidth())
        self.headLight_slider.setSizePolicy(sizePolicy)
        self.headLight_slider.setBaseSize(QtCore.QSize(621, 93))
        self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {\n"
"    height: 60px;\n"
"    image: url(:/images/slider/LightsSlider_BG.png);\n"
"}\n"
"QSlider::handle:horizontal {\n"
"    width: 125px;\n"
"    image: url(:/images/slider/Off.png);\n"
"}")
        self.headLight_slider.setMaximum(4)
        self.headLight_slider.setPageStep(1)
        self.headLight_slider.setOrientation(QtCore.Qt.Horizontal)
        self.headLight_slider.setObjectName("headLight_slider")
        self.WinchIn_label_2 = QtWidgets.QLabel(self.VehCon_page)
        self.WinchIn_label_2.setGeometry(QtCore.QRect(340, 30, 101, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WinchIn_label_2.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WinchIn_label_2.setFont(font)
        self.WinchIn_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.WinchIn_label_2.setObjectName("WinchIn_label_2")
        self.wiper_slider = QtWidgets.QSlider(self.VehCon_page)
        self.wiper_slider.setGeometry(QtCore.QRect(80, 200, 375, 93))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wiper_slider.sizePolicy().hasHeightForWidth())
        self.wiper_slider.setSizePolicy(sizePolicy)
        self.wiper_slider.setBaseSize(QtCore.QSize(395, 93))
        self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {\n"
"    height: 60px;\n"
"    image: url(:/images/slider/WiperSlider_BG.png);\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"    width: 125px;\n"
"    image: url(:/images/slider/Off.png);\n"
"}")
        self.wiper_slider.setMaximum(2)
        self.wiper_slider.setPageStep(1)
        self.wiper_slider.setOrientation(QtCore.Qt.Horizontal)
        self.wiper_slider.setObjectName("wiper_slider")
        self.Washer_btn = QtWidgets.QToolButton(self.VehCon_page)
        self.Washer_btn.setGeometry(QtCore.QRect(530, 200, 141, 93))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Washer_btn.sizePolicy().hasHeightForWidth())
        self.Washer_btn.setSizePolicy(sizePolicy)
        self.Washer_btn.setMinimumSize(QtCore.QSize(125, 93))
        self.Washer_btn.setText("")
        self.Washer_btn.setIcon(icon9)
        self.Washer_btn.setIconSize(QtCore.QSize(125, 60))
        self.Washer_btn.setCheckable(True)
        self.Washer_btn.setObjectName("Washer_btn")
        self.Washer_label = QtWidgets.QLabel(self.VehCon_page)
        self.Washer_label.setGeometry(QtCore.QRect(560, 170, 91, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Washer_label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Washer_label.setFont(font)
        self.Washer_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Washer_label.setObjectName("Washer_label")
        self.WinchIn_label_3 = QtWidgets.QLabel(self.VehCon_page)
        self.WinchIn_label_3.setGeometry(QtCore.QRect(220, 170, 91, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.WinchIn_label_3.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.WinchIn_label_3.setFont(font)
        self.WinchIn_label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.WinchIn_label_3.setObjectName("WinchIn_label_3")
        self.horizontalLayoutWidget_6.raise_()
        self.headLight_slider.raise_()
        self.wiper_slider.raise_()
        self.Washer_btn.raise_()
        self.Washer_label.raise_()
        self.WinchIn_label_3.raise_()
        self.WinchIn_label_2.raise_()
        self.zmainStack.addWidget(self.VehCon_page)
        self.bottomBar_frame = QtWidgets.QFrame(self.centralWidget)
        self.bottomBar_frame.setGeometry(QtCore.QRect(0, 1130, 800, 115))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.bottomBar_frame.setPalette(palette)
        self.bottomBar_frame.setAutoFillBackground(True)
        self.bottomBar_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.bottomBar_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottomBar_frame.setObjectName("bottomBar_frame")
        self.vicControl_btn = QtWidgets.QToolButton(self.bottomBar_frame)
        self.vicControl_btn.setGeometry(QtCore.QRect(10, 10, 90, 90))
        self.vicControl_btn.setMaximumSize(QtCore.QSize(90, 90))
        self.vicControl_btn.setAutoFillBackground(False)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/vehControl_ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.vicControl_btn.setIcon(icon10)
        self.vicControl_btn.setIconSize(QtCore.QSize(90, 90))
        self.vicControl_btn.setObjectName("vicControl_btn")
        self.topInfoBar_frame.raise_()
        self.app_frame.raise_()
        self.bottomBar_frame.raise_()
        self.zmainStack.raise_()
        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        self.zmainStack.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Jeep-MCU"))
        self.access_btn.setText(_translate("MainWindow", "..."))
        self.WigWag_Label.setText(_translate("MainWindow", "Wig-Wag"))
        self.Back_Label.setText(_translate("MainWindow", "Back"))
        self.Body_Label.setText(_translate("MainWindow", "Body"))
        self.Master_Label.setText(_translate("MainWindow", "Master"))
        self.Front_label.setText(_translate("MainWindow", "Front"))
        self.Hazard_Label.setText(_translate("MainWindow", "Hazard"))
        self.WigWag_Label_2.setText(_translate("MainWindow", "Siren"))
        self.label_3.setText(_translate("MainWindow", "Nav Page"))
        self.label_4.setText(_translate("MainWindow", "Backup Cam"))
        self.label.setText(_translate("MainWindow", "Phone Page"))
        self.label_2.setText(_translate("MainWindow", "Media Page"))
        self.WinchIn_label.setText(_translate("MainWindow", "Winch In"))
        self.WinchOut_lable.setText(_translate("MainWindow", "Winch Out"))
        self.OBA_Label.setText(_translate("MainWindow", "OBA"))
        self.SideLights_label.setText(_translate("MainWindow", "Side Lights"))
        self.WinchIn_label_2.setText(_translate("MainWindow", "Lights"))
        self.Washer_label.setText(_translate("MainWindow", "Washer"))
        self.WinchIn_label_3.setText(_translate("MainWindow", "Wipers"))

######################################################
#       Connect app buttons to action definitions    #
######################################################
        self.emLights_btn.clicked.connect(self.emLights_btn_def)
        self.nav_btn.clicked.connect(self.nav_btn_def)
        self.backupCam_btn.clicked.connect(self.backupCam_btn_def)
        self.phone_btn.clicked.connect(self.phone_btn_def)
        self.media_btn.clicked.connect(self.media_btn_def)
        self.vicControl_btn.clicked.connect(self.vicControl_btn_def)

#############################################################
#	Connect the GPIO Buttons to action definitions      #
#############################################################
        self.emLightMaster_btn.clicked.connect(self.emLightMaster)
        self.frontLightFlasher_btn.clicked.connect(self.frontLightFlasher)
        self.backLightFlasher_btn.clicked.connect(self.backLightFlasher)
        self.bodyLightFlasher_btn.clicked.connect(self.bodyLightFlasher)
        self.headLightFlasher_btn.clicked.connect(self.headLightFlasher)
        self.hazardFlasher_btn.clicked.connect(self.hazardFlasher)
        self.OBA_btn.clicked.connect(self.OBA)
        self.Washer_btn.pressed.connect(self.WasherPressed)
        self.Washer_btn.released.connect(self.WasherReleased)
        self.WinchIn_btn.pressed.connect(self.WinchInPressed)
        self.WinchIn_btn.released.connect(self.WinchInReleased)
        self.WinchOut_btn.pressed.connect(self.WinchOutPressed)
        self.WinchOut_btn.released.connect(self.WinchOutReleased)
        self.wiper_slider.valueChanged.connect(self.wiper)
        self.headLight_slider.valueChanged.connect(self.headLight)
        self.siren_slider.valueChanged.connect(self.siren)
        self.horn_btn.pressed.connect(self.hornPressed)
        self.horn_btn.released.connect(self.hornReleased)

##########################################
#       App button action definitions    #
##########################################
    def emLights_btn_def(self):
        self.zmainStack.setCurrentIndex(0)
    def nav_btn_def(self):
        self.zmainStack.setCurrentIndex(1)
    def backupCam_btn_def(self):
        self.zmainStack.setCurrentIndex(2)
    def phone_btn_def(self):
        self.zmainStack.setCurrentIndex(3)
    def media_btn_def(self):
        self.zmainStack.setCurrentIndex(4)
    def vicControl_btn_def(self):
        self.zmainStack.setCurrentIndex(5)

###########################################
#       Button action definitions         #
###########################################
    def emLightMaster(self):
        if self.emLightMaster_btn.isChecked():
            print ("emLightMaster_ON")
            self.frontLightFlasher_btn.setChecked(True)
            self.backLightFlasher_btn.setChecked(True)
            self.bodyLightFlasher_btn.setChecked(True)
            self.headLightFlasher_btn.setChecked(True)
            self.hazardFlasher_btn.setChecked(True)
            arduino.write(str.encode('EMLightsON'))
        else:
            print ("emLightMaster_OFF")
            self.frontLightFlasher_btn.setChecked(False)
            self.backLightFlasher_btn.setChecked(False)
            self.bodyLightFlasher_btn.setChecked(False)
            self.headLightFlasher_btn.setChecked(False)
            self.hazardFlasher_btn.setChecked(False)
            arduino.write(str.encode('EMLightsOFF'))

    def frontLightFlasher(self):
        if self.frontLightFlasher_btn.isChecked():
            print ("frontLightFlasher ON")
        else:
            print ("frontLightFlasher OFF")

    def backLightFlasher(self):
        if self.backLightFlasher_btn.isChecked():
            print ("backLightFlasher ON")
            arduino.write(str.encode('BackupLightsON'))
        else:
            print ("backLightFlasher OFF")
            arduino.write(str.encode('BackupLightsOFF'))

    def bodyLightFlasher(self):
        if self.bodyLightFlasher_btn.isChecked():
            print ("bodyLightFlasher ON")
        else:
            print ("bodyLightFlasher OFF")

    def headLightFlasher(self):
        if self.headLightFlasher_btn.isChecked():
            print ("headLightFlasher ON")
        else:
            print ("headLightFlasher OFF")

    def siren(self, value):
        if value == 1:
            print ("Wail ON")
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Wail.png);}")

        elif value == 2:
            print ("Warble ON")
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Warble.png);}")

        elif value == 3:
            print ("Whoop ON")
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Whoop.png);}")

        else:
            print ("Siren OFF")
            self.siren_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/SirenSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Off.png);}")

    def hornPressed(self):
            print ("Horn ON")
            self.horn_btn.setChecked(True)

    def hornReleased(self):
            print ("Horn OFF")
            self.horn_btn.setChecked(False)


############Vechicle Contorl#############
    def headLight(self, value):
        if value == 1:
            print ("RunningLights ON")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Parking.png);}")

            arduino.write(str.encode('RunningLightsON'))

        elif value == 2:
            print ("HeadLights ON")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);} QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/On.png);}")

        elif value == 3:
            print ("Highbeam ON")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/High.png);}")

        elif value == 4:
            print ("HeadLights AUTO")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Auto.png);}")

        else:
            print ("headLight OFF")
            self.headLight_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/LightsSlider_BG.png);}QSlider::handle:horizontal {width: 125px; image: url(:/images/slider/Off.png);}")

            arduino.write(str.encode('RunningLightsOFF'))

    def WasherPressed(self):
            print ("Washer ON")
            self.Washer_btn.setChecked(True)

    def WasherReleased(self):
            print ("Washer OFF")
            self.Washer_btn.setChecked(False)

    def WinchInPressed(self):
            print ("Winch In - Started")
            self.WinchIn_btn.setChecked(True)

    def WinchInReleased(self):
            print ("Winch In - Stopped")
            self.WinchIn_btn.setChecked(False)

    def WinchOutPressed(self):
            print ("Winch Out - Started")
            self.WinchOut_btn.setChecked(True)

    def WinchOutReleased(self):
            print ("Winch Out - Stopped")
            self.WinchOut_btn.setChecked(False)

    def wiper(self, value):
        if value == 1:
            print ("Wipers LOW")
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/Low.png);}")

        elif value == 2:
            print ("Wipers HIGH")
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/High.png);}")

        else:
            print ("Wipers OFF")
            self.wiper_slider.setStyleSheet("QSlider::groove:horizontal {height: 60px;image: url(:/images/slider/WiperSlider_BG.png);}QSlider::handle:horizontal {width: 125px;image: url(:/images/slider/Off.png);}")

    def OBA(self):
        if self.OBA_btn.isChecked():
            print ("OBA ON")
        else:
            print ("OBA OFF")

    def hazardFlasher(self):
        if self.hazardFlasher_btn.isChecked():
            print ("hazardFlasher ON")
            arduino.write(str.encode('LeftTurnON'))
            arduino.write(str.encode('RightTurnON'))
        else:
            arduino.write(str.encode('LeftTurnOFF'))
            arduino.write(str.encode('RightTurnOFF'))

##################

def main():
   app = QtWidgets.QApplication(sys.argv)
   ex = Ui_MainWindow()
   ex.setWindowFlags(QtCore.Qt.FramelessWindowHint)
   ex.showMaximized()
   sys.exit(app.exec_())

if __name__ == '__main__':
   main()
